name: ci
permissions:
  id-token: write
  contents: write
  pull-requests: write
on:
  push: # Dev Branch 이고 features이거나 Iac 코드쪽이 변경되었을 때.
    branches:
      - 'dev'
    paths:
      - './features/tagging/custodian/**'
      - './iac/terraform/custodian/**'
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: custodian-repo

# Jobs는 총 4개의 job이 있음.
# custodia Job은 Build 후 ECR에 적재 Job.
# Set up Job은 Muti Account 셋팅 할 정보를 받는 Job.
# Process Job은 앞서 받은 역할 정보를 통해 Role로 각각의 Muti Account에 Terraform으로 리소스 배포 Job.
# Slack job은 앞선 Job의 성공 실패 여부를 알려주는 알림 Job.

jobs:
  custodian:
    runs-on: ubuntu-22.04
    environment: "custodian"
    steps:
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login-ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
      - name: Build and Push
        run: |
          ls -l
          docker build . --file ./features/tagging/custodian/Dockerfile --no-cache --tag ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Push the Docker image
        run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

  setup:
    runs-on: ubuntu-22.04
    environment: "describe-ec2-resource"
    needs: custodian
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Retrieve items from DynamoDB
        id: set-matrix
        run: |
          items=$(aws secretsmanager get-secret-value --secret-id "prod/aws_role" --region "ap-northeast-2" | jq -r .SecretString > items.yaml)
          cat items.yaml

          
          length=$(yq e 'length' items.yaml)
          echo "length : $length"
          matrix_values="["
          for i in $(seq 0 $(($length - 1))); do
            account=$(yq e ".[$i].account.S" items.yaml)
            bucket=$(yq e ".[$i].bucket.S" items.yaml)
            region=$(yq e ".[$i].region.S" items.yaml)
            role=$(yq e ".[$i].role.S" items.yaml)
            service=$(yq e ".[$i].service.S" items.yaml)
            profile=$(yq e ".[$i].profile.S" items.yaml)
            
            matrix_values="${matrix_values}{\"account\": \"$account\", \"bucket\": \"$bucket\", \"region\": \"$region\", \"role\": \"$role\", \"service\": \"$service\", \"profile\": \"$profile\"},"
          done
          matrix_values="${matrix_values%?}]"
          echo "matrix=$matrix_values" >> $GITHUB_OUTPUT

  process:
    needs: setup
    runs-on: ubuntu-22.04
    outputs:
      result: ${{ steps.terraform-setup.outcome}}
    strategy:
      matrix:
        item: ${{fromJson(needs.setup.outputs.matrix)}}
    environment: "describe-ec2-resource"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: aws sts assumerole
        run: |
          aws sts assume-role --role-arn "arn:aws:iam::${{ matrix.item.account }}:role/${{ matrix.item.role }}" --role-session-name ${{ matrix.item.profile }} --region ap-northeast-2 > sts.json
          access=$(cat sts.json  | yq '.Credentials.AccessKeyId')
          secret=$(cat sts.json  | yq '.Credentials.SecretAccessKey')
          sessiontoken=$(cat sts.json  | yq '.Credentials.SessionToken')
          echo "AWS_ACCESS_KEY_ID=$access" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$secret" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$sessiontoken" >> $GITHUB_ENV
          aws configure set aws_access_key_id $access --profile ${{ matrix.item.profile }}
          aws configure set aws_secret_access_key $secret --profile ${{ matrix.item.profile }}
          aws configure set aws_session_token $sessiontoken --profile ${{ matrix.item.profile }}

      - name: install terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: tf init
        id: terraform-setup
        run: |
          echo 
          cd ${GITHUB_WORKSPACE}/iac/terraform/custodian
          terraform init -backend-config="bucket=${{ matrix.item.bucket }}" -backend-config="key=${{ matrix.item.bucket }}/eks-project-custodian-dev.tfstate"
          terraform apply -var="aws_profile=${{ matrix.item.profile }}" -var="s3_bucket=${{ matrix.item.bucket }}" -var="key=${{ matrix.item.bucket }}/eks-project-custodian-dev.tfstate" -var="image_uri=750876142122.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" -auto-approve

  slack:
    runs-on: ubuntu-22.04
    environment: "custodian"
    needs: process
    if: always()
    steps:
    - name: slack
      uses: slackapi/slack-github-action@v1.24.0
      id: slack
      with:
        payload: |
          {
            "text": "custoidian deployment finished (${{ needs.process.outputs.result}})",
            "attachments": [
              {
                "pretext": "Deployment finished",
                "color": "28a745",
                "fields": [
                  {
                    "title": "Status",
                    "short": true,
                    "value": "${{ needs.process.outputs.result}}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

